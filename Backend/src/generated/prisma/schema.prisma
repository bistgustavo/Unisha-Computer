// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum WebRole {
  customer
  admin
}

enum UserStatus {
  active
  inactive
  suspended
}

enum ProductStockStatus {
  available
  outOfStock
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

enum PaymentMethod {
  e_sewa
  bank_transfer
  cash_on_delivery
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

// ===== MODELS =====
model User {
  user_id     String     @id @default(uuid())
  username    String     @unique
  first_name  String
  last_name   String
  web_role    WebRole    @default(customer)
  email       String     @unique
  password    String
  profile_url String?
  phone       String?
  address     String?
  status      UserStatus @default(active)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cart        Cart?
  orders      Order[]
  payments    Payment[]
  reviews     Review[]

  @@map("users")
}

model Product {
  product_id     String             @id @default(uuid())
  name           String
  description    String?
  price          Decimal
  quantity       Int
  stock          ProductStockStatus @default(available)
  stock_quantity Int
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  image_url      String?
  video_url      String?
  category_id    String?
  category       Category?          @relation(fields: [category_id], references: [category_id])
  cartItems      CartItem[]
  orderItems     OrderItem[]
  reviews        Review[]

  @@map("products")
}

model Category {
  category_id String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Cart {
  cart_id   String     @id @default(uuid())
  user_id   String     @unique
  user      User       @relation(fields: [user_id], references: [user_id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  cart_item_id String   @id @default(uuid())
  cart_id      String
  cart         Cart     @relation(fields: [cart_id], references: [cart_id])
  product_id   String
  product      Product  @relation(fields: [product_id], references: [product_id])
  quantity     Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  order_id         String      @id @default(uuid())
  user_id          String
  user             User        @relation(fields: [user_id], references: [user_id])
  items            OrderItem[]
  total_amount     Decimal
  status           OrderStatus @default(pending)
  payment          Payment?
  shipping_address String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  order_item_id     String   @id @default(uuid())
  order_id          String
  order             Order    @relation(fields: [order_id], references: [order_id])
  product_id        String
  product           Product  @relation(fields: [product_id], references: [product_id])
  quantity          Int
  price_at_purchase Decimal
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("order_items")
}

model Payment {
  payment_id     String        @id @default(uuid())
  order_id       String        @unique
  order          Order         @relation(fields: [order_id], references: [order_id])
  user_id        String
  user           User          @relation(fields: [user_id], references: [user_id])
  amount         Decimal
  method         PaymentMethod @default(e_sewa)
  status         PaymentStatus @default(pending)
  transaction_id String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("payments")
}

model Review {
  review_id  String   @id @default(uuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [user_id])
  product_id String
  product    Product  @relation(fields: [product_id], references: [product_id])
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}
